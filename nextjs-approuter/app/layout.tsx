import './styles/index.scss'

import FeatureFlagProvider from '@/app/components/FeatureFlagProvider'
import { Inter } from 'next/font/google'
import type { Metadata } from 'next'
import Nav from '@/app/components/Nav'
import flagsmith from 'flagsmith/isomorphic'
import getTraits from '@/app/utils/getTraits'
import useDefaultUser from '@/app/hooks/useDefaultUser'

const inter = Inter({ subsets: ['latin'] })

export const metadata: Metadata = {
  title: 'Flagsmith with Next.js',
  description: 'Generated by create next app',
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode
}>) {
  const defaultUser = await useDefaultUser()

  await flagsmith.init({
    // The layout is rendered on the server, so we need to use the server environment ID.
    // This is because the client environment ID is not available until the client is rendered.
    environmentID: process.env.FLAGSMITH_ENVIRONMENT_ID || '',
    identity: defaultUser?.id,
    traits: getTraits(defaultUser),
  })

  const serverState = flagsmith.getState()

  // Check this out in the terminal console.
  console.log(serverState)

  return (
    <html lang='en'>
      {/**
       * The FeatureFlagProvider is a client component that provides the Flagsmith context to the app.
       * It is rendered on the client, so we need to pass the server state to it. The Context API is only
       * available in client components.
       *
       * If we need to conditionally enable access to an entire page, for example, we need to make a server
       * call to check the feature flag.
       */}
      <FeatureFlagProvider serverState={serverState}>
        <body className={inter.className}>
          <Nav defaultUser={defaultUser} />
          {children}
        </body>
      </FeatureFlagProvider>
    </html>
  )
}
